name: Build and Publish Docker Image Template

on:
  workflow_call:
    inputs:
      dockerfile_context_path:
        required: true
        type: string
        description: 'The path to the Dockerfile context.'
      dockerfile_path:
        required: true
        type: string
        description: 'The path to the Dockerfile relative to the context.'
      image_name_var:
        required: true
        type: string
        description: 'The name of the image variable from GitHub vars (e.g., vars.VERILOG_IMAGE_NAME).'
      force_rebuild:
        required: false
        type: boolean
        default: false
    outputs:
      image_rebuilt:
        description: 'Whether the Docker image was rebuilt.'
        value: ${{ jobs.build_and_publish.outputs.image_rebuilt }}

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    outputs:
      image_rebuilt: ${{ steps.check_for_rebuild.outputs.should_rebuild }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for Dockerfile or related changes
        id: check_docker_files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            ${{ inputs.dockerfile_context_path }}/**
            .github/workflows/build-and-publish-docker-image-template.yaml
          separator: ','

      - name: Determine if Docker image should be rebuilt
        id: check_for_rebuild
        run: |
          SHOULD_REBUILD="false"
          if [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild is enabled."
            SHOULD_REBUILD="true"
          elif [[ "${{ steps.check_docker_files.outputs.any_changed }}" == "true" ]]; then
            echo "Docker-related files have changed."
            echo "List all the files that have changed: ${{ steps.check_docker_files.outputs.all_changed_files }}"
            SHOULD_REBUILD="true"
          else
            echo "No Docker-related changes and no force rebuild. Skipping image build."
          fi
          echo "should_rebuild=$SHOULD_REBUILD" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        if: steps.check_for_rebuild.outputs.should_rebuild == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.check_for_rebuild.outputs.should_rebuild == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate image tags
        id: meta
        if: steps.check_for_rebuild.outputs.should_rebuild == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ inputs.image_name_var }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build and push Docker image
        if: steps.check_for_rebuild.outputs.should_rebuild == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.dockerfile_context_path }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: ${{ inputs.force_rebuild == 'true' && '' || format('type=gha,scope={0}-build-cache', inputs.image_name_var) }}
          cache-to: type=gha,mode=max,scope=${{ inputs.image_name_var }}-build-cache