import os
import subprocess
import tempfile
from unittest.mock import patch, mock_open
import pytest

from waveform_exporter.backends import GtkWaveBackend

@pytest.fixture
def mock_subprocess_run():
    with patch("subprocess.run") as mock_run:
        yield mock_run

@pytest.fixture
def mock_os_remove():
    with patch("os.remove") as mock_remove:
        yield mock_remove

def test_gtkwave_backend_exports_waveform(mock_subprocess_run, mock_os_remove):
    backend = GtkWaveBackend()
    with tempfile.TemporaryDirectory() as tmpdir:
        vcd_file = os.path.join(tmpdir, "test.vcd")
        output_path = os.path.join(tmpdir, "test_waveform.png")
        sav_file_path = os.path.join(tmpdir, "temp_gtkwave.sav")
        signals = ["top.clk", "top.reset"]

        # Create a dummy .sav file to ensure os.path.exists returns True in the backend
        with open(sav_file_path, "w") as f:
            f.write("dummy content")

        # Mock open to capture the .sav file content written by the backend
        m_open = mock_open()
        with patch("builtins.open", m_open):
            backend.export_waveform(vcd_file, output_path, signals)

        # Verify subprocess.run was called correctly
        mock_subprocess_run.assert_called_once_with([
            "gtkwave",
            "-T",
            "-S", sav_file_path,
            "-o", output_path,
            vcd_file
        ], check=True)

        # Verify the .sav file content that was written by the backend
        expected_sav_content = (
            "# GTKWave save file generated by WaveformExporter\n"
            "# Version: 3\n"
            f".main.wave.vlist.add {{{vcd_file}}}\n"
            f".main.wave.vlist.select_and_add {{top.clk}}\n"
            f".main.wave.vlist.select_and_add {{top.reset}}\n"
            ".main.wave.zoom_fit\n"
        )
        m_open.assert_called_once_with(sav_file_path, "w")
        m_open().write.assert_called_once_with(expected_sav_content)

        # Verify the temporary .sav file was removed
        mock_os_remove.assert_called_once_with(sav_file_path)

def test_gtkwave_backend_handles_subprocess_error(mock_subprocess_run, mock_os_remove):
    backend = GtkWaveBackend()
    with tempfile.TemporaryDirectory() as tmpdir:
        vcd_file = os.path.join(tmpdir, "test.vcd")
        output_path = os.path.join(tmpdir, "test_waveform.png")
        sav_file_path = os.path.join(tmpdir, "temp_gtkwave.sav")
        signals = ["top.clk"]

        # Create a dummy .sav file to ensure os.path.exists returns True in the backend
        with open(sav_file_path, "w") as f:
            f.write("dummy content")

        mock_subprocess_run.side_effect = subprocess.CalledProcessError(1, "gtkwave")

        with pytest.raises(subprocess.CalledProcessError):
            backend.export_waveform(vcd_file, output_path, signals)

        # Verify temporary .sav file was still attempted to be removed on error
        mock_os_remove.assert_called_once_with(sav_file_path)
