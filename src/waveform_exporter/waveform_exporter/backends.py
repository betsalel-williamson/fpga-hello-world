from abc import ABC, abstractmethod
import os
import subprocess


class WaveformExporterBackend(ABC):
    @abstractmethod
    def export_waveform(
        self, vcd_file: str, output_path: str, signals_to_display: list[str]
    ):
        pass


class GtkWaveBackend(WaveformExporterBackend):
    def export_waveform(
        self, vcd_file: str, output_path: str, signals_to_display: list[str]
    ):
        print(f"Exporting waveform using GTKWave to {output_path}...")

        # Generate a temporary .sav file
        sav_file = os.path.join(os.path.dirname(output_path), "temp_gtkwave.sav")

        sav_lines = [
            "# GTKWave save file generated by WaveformExporter",
            "# Version: 3",
            f".main.wave.vlist.add {{{vcd_file}}}",
        ]
        for signal in signals_to_display:
            sav_lines.append(f".main.wave.vlist.select_and_add {{{signal}}}")
        sav_lines.append(".main.wave.zoom_fit")

        sav_content = "\n".join(sav_lines) + "\n"

        with open(sav_file, "w") as f:
            f.write(sav_content)

        try:
            # Run gtkwave headlessly using xvfb-run
            subprocess.run(
                ["xvfb-run", "--auto-display", "gtkwave", vcd_file, "-T", "-S", sav_file, "-o", output_path],
                check=True,
                env={**os.environ, "DISPLAY": ":99"} # Explicitly set DISPLAY
            )
            print(f"Waveform exported to {output_path}")
        except subprocess.CalledProcessError as e:
            print(f"Error during GTKWave export: {e}")
            raise
        finally:
            # Clean up the temporary .sav file
            if os.path.exists(sav_file):
                os.remove(sav_file)


class MatplotlibBackend(WaveformExporterBackend):
    def export_waveform(
        self, vcd_file: str, output_path: str, signals_to_display: list[str]
    ):
        print(f"Exporting waveform using Matplotlib to {output_path} (placeholder)...")
        # Placeholder for Matplotlib implementation
        # This would involve using vcdvcd to parse and matplotlib to plot
        # For now, just simulate success
        print(f"Matplotlib export placeholder completed for {output_path}")